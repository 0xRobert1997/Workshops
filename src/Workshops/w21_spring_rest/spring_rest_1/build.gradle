plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springBootDMVersion}"
	id 'org.openapi.generator' version "${openApiGeneratorVersion}"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// żeby api mogło zwracać xml'e
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

	//db
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'

	// api
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
	implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
	implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
	implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"
	implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

	//annotations
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	//tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"

	// ten slf4j od wiremocka musi być wyżej od wiremocka bo standalone ma swojego i się mieszają
	testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
	testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"

}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

openApiGenerate {
	generatorName = "java"
	library = "webclient"
	configOptions = [
		serializableModel: "true",
		dateLibrary: "java8",
		serializationLibrary: "jackson"
	]

	outputDir = "$buildDir/generated-sources/openapi".toString()
	inputSpec = "$rootDir/src/main/resources/petstore-v3.0.2.json".toString()
	apiPackage = "pl.zajavka.infrastructure.petstore.api"
	modelPackage = "pl.zajavka.infrastructure.petstore.model"
}

sourceSets {
	main {
		java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
	}
}

compileJava.dependsOn tasks.openApiGenerate

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

compileJava.options.encoding = 'UTF-8'